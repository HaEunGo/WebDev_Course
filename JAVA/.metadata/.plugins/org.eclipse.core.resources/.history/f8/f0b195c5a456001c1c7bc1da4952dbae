package com.kh.stream.intermediate;

import java.util.Arrays;
import java.util.List;

import com.kh.stream.model.vo.Student;

public class B_Mapping {
	/*
	 * 매핑
	 * 	- 중간 처리 기능으로 스트림의 요소를 다른 요소로 대체하는 작업을 말한다.
	 * 		- mapXXX() : 요소를 대체하는 요소로 구성된 새로운 스트림을 생성한다.
	 * 		- flatMapXXX() : 하나의 요소를 복수의 요소들로 구성된 새로운 스트림을 생성한다.
	 * 		- asDoubleStream() : IntStream, LongStream -> DoubleStream으로 변환해서 리턴한다.
	 * 		- asLongStream() : IntStream, DoubleStream -> LongStream으로 변환해서 리턴한다.
	 * 		- boxed() : int, long, double 요소를 Integer, Long, Double 요소로 박싱해서 스트림을 생성한다.
	 */
	
	public void method1() {
		List<Student> list = Arrays.asList(
				new Student("봉봉이", 20, "여자", 86, 97),
				new Student("땅땅이", 20, "여자", 45, 68),
				new Student("쑥쑥이", 20, "남자", 100, 100)
		);
		
		// 어떨 때 사용될까? : ex) 수학점수의 합계나 평균만 따로 뽑아서 쓰고 싶은 경우 / 다른 객체로 변환해 주고 싶을 때
		list.stream()
			.map(student -> student.getName())	// student의 객체의 이름만 리턴한다. (리턴된 값만 모아서 새로운 스트림 생성)
			.forEach(name -> System.out.println(name));
		
		System.out.println();
		
		double avg = list.stream()
						 .mapToInt(student -> student.getMath())
					     .average()
					 	 .getAsDouble();
		
		System.out.println("수학 점수의 평균 : " + avg);
	}
	
	public void method2() {
		// 배열(하나의 요소)에 각각의 문자들을 내부에서 공백으로 구분처리
		List<String> list = Arrays.asList("Java11 lambda", "StreamAPI Filtering Mapping");
		
		list.stream().forEach(str -> System.out.println(str));
		
		System.out.println();
		
		String str = "Java11 Lambda";
		str.split(" ");
		
		// 문자열을 공백으로 쪼개서 각각의 새로운 스트림 생성
//		list.stream()
//			.flatMap((str) -> {})
		
		
	}
}
